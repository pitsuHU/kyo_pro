// https://hcpc-hokudai.github.io/archive/graph_flow_002.pdf

#define MAX_V 1000000
struct edge{
    int to,cap,rev;
};

vector<vector<edge>> G(MAX_V);
bool used[MAX_V];

void add_edge(int from,int to,int cap){
    edge F;
    edge T;
    F.to = to;
    F.cap = cap;
    F.rev = G[to].size();
    G[from].push_back(F);

    T.to = from;
    T.cap = 0;
    T.rev = G[from].size()-1;
    G[to].push_back(T);
}

int dfs(int v,int t,int f){
    if(v == t) return f;
    used[v] = true;
    for(int i=0; i<G[v].size(); i++){
        edge &e = G[v][i];
        if(!used[e.to] && e.cap > 0){
            int d = dfs(e.to,t,min(f,e.cap));
            if(d > 0){
                e.cap -= d;
                G[e.to][e.rev].cap += d;
                return d;
            }
        }
    }
    return 0;
}

int max_flow(int s,int t){
    int flow = 0;
    while(1){
        memset(used, 0, sizeof(used));
        int f = dfs(s,t,inf);
        if(f == 0) return flow;
        flow += f;
    }
}
