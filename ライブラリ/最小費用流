// 最小費用流
// O(F E log V)
// 与えられるもの
// 有向グラフ G = (V, E)
// 各辺 e に対して, 容量 u(e) >= 0
// 各辺 e に対して, 費用 c(e) (負でも ok)

// 使い方
// PrimalDual(V) (コンストラクタ)
// add_edge(int from, int to, flow_t cap, cost_t cost)
// cost に関する負の閉路が存在する場合,だめ
// veryfied : http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=GRL_6_B&lang=jp
// 流れなかったら -1 を返す

template< typename flow_t, typename cost_t >
struct PrimalDual{
    const cost_t INF;

    struct edge {
        int to;
        flow_t cap;
        cost_t cost;
        int rev;
        bool isrev;
    };
    vector<vector<edge>> graph;
    vector<cost_t> potential, min_cost;
    vector<int> prevv, preve;

    PrimalDual(int V) : graph(V), INF(numeric_limits< cost_t >::max()){}

    void add_edge(int from, int to, flow_t cap, cost_t cost){
        graph[from].emplace_back((edge) {to, cap, cost, (int)graph[to].size(), false});
        graph[to].emplace_back((edge) {from, 0, -cost, (int)graph[from].size() - 1, true});
    }

    cost_t min_cost_flow(int s, int t, flow_t f){
        int V = (int) graph.size();
        cost_t ret = 0;
        using Pi = pair< cost_t, int >;
        priority_queue< Pi, vector< Pi >, greater< Pi > > que;
        potential.assign(V, 0);
        preve.assign(V, -1);
        prevv.assign(V, -1);

        while(f > 0){
            min_cost.assign(V, INF);
            que.emplace(0, s);
            min_cost[s] = 0;
            while(!que.empty()){
                Pi p = que.top();
                que.pop();
                if(min_cost[p.second] < p.first) continue;
                for(int i = 0; i < graph[p.second].size(); i++){
                    edge &e = graph[p.second][i];
                    cost_t nextCost = min_cost[p.second] + e.cost + potential[p.second] - potential[e.to];
                    if(e.cap > 0 && min_cost[e.to] > nextCost){
                        min_cost[e.to] = nextCost;
                        prevv[e.to] = p.second, preve[e.to] = i;
                        que.emplace(min_cost[e.to], e.to);
                    }
                }
            }
            if(min_cost[t] == INF) return -1;
            for(int v = 0; v < V; v++) potential[v] += min_cost[v];
            flow_t addflow = f;
            for(int v = t; v != s; v = prevv[v]){
                addflow = min(addflow, graph[prevv[v]][preve[v]].cap);
            }
            f -= addflow;
            ret += addflow * potential[t];
            for(int v = t; v != s; v = prevv[v]){
                edge &e = graph[prevv[v]][preve[v]];
                e.cap -= addflow;
                graph[v][e.rev].cap += addflow;
            }
        }
        return ret;
    }

    void output(){
        for(int i = 0; i < graph.size(); i++){
            for(auto &e : graph[i]) {
                if(e.isrev) continue;
                auto &rev_e = graph[e.to][e.rev];
                cout << i << "->" << e.to << " (flow: " << rev_e.cap << "/" << rev_e.cap + e.cap << ")" << endl;
            }
        }
    }
};

bool solve() {
  int n; cin >> n;
  if (n == 0) return false;
  vector<lint> x(n);
  vector<lint> y(n);
  vector<lint> z(n);
  lint sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> x[i] >> y[i] >> z[i];
    sum += x[i] * y[i] * z[i];
  }

  int source = 2 * n;
  int sink = 2 * n + 1;
  PrimalDual<lint, lint> pd(2 * n + 2);

  for (int i = 0; i < n; i++) {
    // source -> in
    pd.add_edge(source, i, 1, 0);
    // in -> out
    pd.add_edge(i, i + n, 1, 0);
    // out -> sink
    pd.add_edge(i + n, sink, 1, 0);
  }

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (i == j) continue;

      // i -> j (i + n, j, 1, -x[i] * y[i] * z[i])
      vector<lint> dat = {x[i], y[i], z[i]};
      vector<lint> big = {x[j], y[j], z[j]};
      sort(ALL(dat));
      bool can_add_edge = false;
      do {
        bool ok = true;
        for (int k = 0; k < 3; k++) {
          if (dat[k] >= big[k]) ok = false;
        }
        if (ok) {
          can_add_edge = true;
          break;
        }

      } while (next_permutation(ALL(dat)));

      if (can_add_edge) {
        pd.add_edge(i + n, j, 1, -x[i] * y[i] * z[i]);
      }
    }
  }


  // source -> sink
  pd.add_edge(source, sink, INF, 0);
  // cerr << "flow = " << pd.min_cost_flow(source, sink, n) << endl;
  // cerr << "sum = " << sum << endl;
  cout << sum + pd.min_cost_flow(source, sink, n) << endl;
  return true;
}
