template<typename T>
struct Compress {
	vector<T> v;
	Compress() {}
	Compress(vector<T> _v) {
		build(_v);
	}
 
	void build(vector<T> _v) {
		v = _v;
		sort(v.begin(), v.end());
		v.erase(unique(v.begin(), v.end()), v.end());
	}
	int get(T x) {
		return lower_bound(v.begin(), v.end(), x) - v.begin();
	}
 
	T& operator[](int i) { return v[i]; }
 
 
	int size() {
		return (int)v.size();
	}
};